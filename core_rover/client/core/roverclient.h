/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_ROVERCLIENT_H_
#define JSONRPC_CPP_STUB_ROVERCLIENT_H_

#include <jsonrpccpp/client.h>

class roverclient : public jsonrpc::Client
{
    public:
        roverclient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        int setJointAngle(double angle, int joint) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["angle"] = angle;
            p["joint"] = joint;
            Json::Value result = this->CallMethod("setJointAngle",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        double getJointAngle(int joint) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["joint"] = joint;
            Json::Value result = this->CallMethod("getJointAngle",p);
            if (result.isDouble())
                return result.asDouble();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int setJointSpeed(int joint, int speed) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["joint"] = joint;
            p["speed"] = speed;
            Json::Value result = this->CallMethod("setJointSpeed",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int getJointSpeed(int joint) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["joint"] = joint;
            Json::Value result = this->CallMethod("getJointSpeed",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int setCartesianPosition(double x, double y, double z) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["x"] = x;
            p["y"] = y;
            p["z"] = z;
            Json::Value result = this->CallMethod("setCartesianPosition",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value getCartesianPosition() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getCartesianPosition",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int setGripper(bool open) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["open"] = open;
            Json::Value result = this->CallMethod("setGripper",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int setWheelSpeed(int speed, int wheel) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["speed"] = speed;
            p["wheel"] = wheel;
            Json::Value result = this->CallMethod("setWheelSpeed",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int getWheelSpeed(int wheel) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["wheel"] = wheel;
            Json::Value result = this->CallMethod("getWheelSpeed",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int chassisDrive(int direction, int speed) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["direction"] = direction;
            p["speed"] = speed;
            Json::Value result = this->CallMethod("chassisDrive",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int chassisStop() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("chassisStop",p);
            if (result.isInt())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        void USBCamStartStream(int camera) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["camera"] = camera;
            this->CallNotification("USBCamStartStream",p);
        }
        std::string USBCamStopStream() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("USBCamStopStream",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        void USBCamSwitchCamera(int camaera) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["camaera"] = camaera;
            this->CallNotification("USBCamSwitchCamera",p);
        }
        void USBCamSetInputResolution(const std::string& new_resolution) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["new_resolution"] = new_resolution;
            this->CallNotification("USBCamSetInputResolution",p);
        }
        void USBCamSetOutputResolution(const std::string& new_resolution) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["new_resolution"] = new_resolution;
            this->CallNotification("USBCamSetOutputResolution",p);
        }
        std::string USBCamGetStreamResolution() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("USBCamGetStreamResolution",p);
            if (result.isString())
                return result.asString();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
	Json::Value getGPS() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("getGPS",p);
            if (result.isArray())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_ROVERCLIENT_H_
